name: Build Release

on:
  push:
    branches:
      - main

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract.outputs.version }}
      changelog: ${{ steps.extract.outputs.changelog }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Extract version and changelog
        id: extract
        shell: bash
        run: |
          # Get the commit message from the merge commit
          COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Commit message: $COMMIT_MSG"

          # Ensure commit contains 'Release' keyword
          if [[ "$COMMIT_MSG" != *"Release"* ]]; then
            echo "No Release keyword found. Exiting."
            exit 78
          fi

          # Extract version following "Release " (e.g., "Release 1.2.3")
          VERSION=$(echo "$COMMIT_MSG" | grep -oP '(?<=Release )\d+\.\d+\.\d+')
          if [ -z "$VERSION" ]; then
            echo "No valid version found in commit message."
            exit 1
          fi

          # Validate version format (X.Y.Z)
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Expected X.Y.Z"
            exit 1
          fi

          # Extract changelog from commit (lines after "Changelog:")
          CHANGELOG=$(echo "$COMMIT_MSG" | sed -n '/Changelog:/,$p' | sed '1d')
          if [ -z "$CHANGELOG" ]; then
            echo "No changelog found in commit message. Please add a changelog and try again."
            exit 1
          fi

          echo "Finished!"

          # Get latest release version from GitHub API
          LATEST=$(curl -s https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest | jq -r .tag_name)
          if [ "$LATEST" != "null" ] && [ -n "$LATEST" ]; then
            LATEST_VERSION=${LATEST#v}
            # Compare versions: check that $VERSION is greater than $LATEST_VERSION
            if ! printf "%s\n%s" "$LATEST_VERSION" "$VERSION" | sort -V -C; then
              echo "Version $VERSION is not greater than the latest release $LATEST_VERSION."
              exit 1
            fi
          fi

          echo "Version: $VERSION"
          echo "Changelog: $CHANGELOG"

          echo "{name}={value}" >> $GITHUB_OUTPUT
          echo "::set-output name=changelog::$CHANGELOG"

  build:
    needs: prepare-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: pip install -r requirements.txt pyinstaller

      - name: Build executable
        run: pyinstaller --onefile main.py && ls dist/

      - name: Set artifact path
        id: set_path
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            echo "artifact=dist/main.exe" >> $GITHUB_OUTPUT
          else
            echo "artifact=dist/main" >> $GITHUB_OUTPUT
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-SandustrySaveViewer
          path: ${{ steps.set_path.outputs.artifact }}

  create-release:
    needs: [prepare-release, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: Create GitHub Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ needs.prepare-release.outputs.version }}
          name: Release ${{ needs.prepare-release.outputs.version }}
          body: ${{ needs.prepare-release.outputs.changelog }}

      - name: Upload Linux Executable
        if: ${{ always() }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_artifacts/ubuntu-latest-SandustrySaveViewer/dist/main
          asset_name: main-linux
          asset_content_type: application/octet-stream

      - name: Upload Windows Executable
        if: ${{ always() }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_artifacts/windows-latest-SandustrySaveViewer/dist/main.exe
          asset_name: main-windows.exe
          asset_content_type: application/octet-stream

      - name: Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            main-windows.exe
            main-linux
