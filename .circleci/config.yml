version: 2.1

orbs:
  win: circleci/windows@5.1.0

jobs:
  build-linux:
    resource_class: small
    docker:
      - image: cimg/base:current
    steps:
      - checkout

      - run:
          name: "Update APT"
          command: "sudo apt update"

      - run:
          name: "Install pip"
          command: "sudo apt install python3-pip -y"

      - run:
          name: "Install python dependencies"
          command: "pip install -r requirements.txt pyinstaller"

      - run:
          name: "Build application"
          command: "pyinstaller --onefile main.py"

      - run:
          name: "Install GHR v0.17.0 (Linux)"
          command: |
            wget https://github.com/tcnksm/ghr/releases/download/v0.17.0/ghr_v0.17.0_linux_amd64.tar.gz -O ghr_0.17.0.tar.gz
            tar -xzf ghr_0.17.0.tar.gz
            sudo mv ghr_v0.17.0_linux_amd64/ghr /usr/local/bin/
            rm -rf ghr_0.17.0.tar.gz ghr_v0.17.0_linux_amd64

      - run:
          name: "Extract data from commit"
          command: |
            MERGE_COMMIT_MSG=$(git log --format=%B -n 1 $CIRCLE_SHA1)

            VERSION=$(echo "$MERGE_COMMIT_MSG" | grep -oP '(?<=Version: )[^ ]+')
            if [ -z "$VERSION" ]; then
              echo "Error: No version found in commit message."
              exit 1
            fi
            if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "❌ ERROR: Invalid version format. Expected X.Y.Z (e.g., 1.2.3)."
              exit 1
            fi

            LATEST_TAG=$(curl -sSL "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases/latest" | jq -r .tag_name)
            if [[ "$LATEST_TAG" == "null" || -z "$LATEST_TAG" ]]; then
              echo "⚠️ No previous release found. Skipping version check."
              exit 0
            fi
            LATEST_VERSION=${LATEST_TAG#v} # Remove leading 'v' if exists
            function version_greater() {
              printf "%s\n%s\n" "$2" "$1" | sort -V | head -n1 | grep -q "$2"
            }
            if ! version_greater "$VERSION" "$LATEST_VERSION"; then
              echo "❌ ERROR: Version $VERSION is not greater than latest release $LATEST_VERSION."
              exit 1
            fi

            CHANGELOG=$(echo "$MERGE_COMMIT_MSG" | sed -n '/Changelog:/,/^$/p' | sed '1d')
            if [ -z "$CHANGELOG" ]; then
              echo "Error: No changelog found in commit message."
              exit 1
            fi

            echo "VERSION=$VERSION" >> $BASH_ENV
            echo "CHANGELOG=$CHANGELOG" >> $BASH_ENV

      - run:
          name: "Release Linux Build"
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -n "Release $VERSION" -b "$CHANGELOG" v$VERSION /home/circleci/project/dist/main

  build-windows:
    executor:
      name: win/default
    steps:
      - checkout

      - run:
          name: "Install python dependencies"
          shell: powershell.exe
          command: |
            pip install -r requirements.txt pyinstaller

      - run:
          name: "Build application"
          shell: powershell.exe
          command: |
            pyinstaller --onefile main.py

      - run:
          name: "Install GHR v0.17.0 and Append Windows Build"
          shell: powershell.exe
          command: |
            # Download GHR v0.17.0 for Windows using curl.exe.
            curl.exe -L "https://github.com/tcnksm/ghr/releases/download/v0.17.0/ghr_v0.17.0_windows_amd64.zip" -o "ghr_0.17.0.zip"
            # Extract the archive.
            Expand-Archive -Path "ghr_0.17.0.zip" -DestinationPath "C:\ghr" -Force
            # Ensure ghr.exe is available.
            if (!(Test-Path "C:\ghr\ghr.exe")) {
              $ghrPath = Get-ChildItem -Path "C:\ghr" -Filter "ghr.exe" -Recurse | Select-Object -First 1
              if ($ghrPath) {
                Copy-Item -Path $ghrPath.FullName -Destination "C:\ghr\ghr.exe"
              }
            }
            # Add C:\ghr to the PATH.
            $env:PATH += ";C:\ghr"
            # Query GitHub for the latest release tag.
            $mergeCommitMsg = git log --format=%B -n 1 $env:CIRCLE_SHA1

            if ($mergeCommitMsg -match "Version: (\d+\.\d+\.\d+)") {
              $version = $matches[1]
            } else {
              Write-Host "❌ ERROR: Version not found in commit message."
              exit 1
            }

            $latestTag = (Invoke-RestMethod -Uri "https://api.github.com/repos/$env:CIRCLE_PROJECT_USERNAME/$env:CIRCLE_PROJECT_REPONAME/releases/latest").tag_name
            if (!$latestTag) {
              Write-Host "⚠️ No previous release found. Skipping version check."
              exit 0
            }
            $latestVersion = $latestTag -replace '^v', ''  # Remove leading 'v'
            function Compare-Version ($v1, $v2) {
              $v1Parts = $v1 -split '\.'
              $v2Parts = $v2 -split '\.'

              for ($i = 0; $i -lt 3; $i++) {
                if ([int]$v1Parts[$i] -gt [int]$v2Parts[$i]) { return $true }
                if ([int]$v1Parts[$i] -lt [int]$v2Parts[$i]) { return $false }
              }
              return $false
            }
            if (Compare-Version $version $latestVersion) {
              Write-Host "✅ New version $version is valid (greater than $latestVersion)"
            } else {
              Write-Host "❌ ERROR: Version $version is not greater than latest release $latestVersion."
              exit 1
            }

            $changelog = $mergeCommitMsg | Select-String -Pattern "(?<=Changelog:)(.|\n)*" | ForEach-Object { $_.Matches.Value }
            if (-not $changelog) {
              Write-Host "Error: No changelog found in commit message."
              exit 1
            }

            C:\ghr\ghr.exe -t $env:GITHUB_TOKEN -u $env:CIRCLE_PROJECT_USERNAME -r $env:CIRCLE_PROJECT_REPONAME -n "Release $version" -b "$changelog" v$version "dist\main.exe"

workflows:
  release-workflow:
    jobs:
      - build-linux
      - build-windows
